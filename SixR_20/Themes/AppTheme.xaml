<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mui="http://firstfloorsoftware.com/ModernUI"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:fa="http://schemas.fontawesome.io/icons/"
                    xmlns:convertor="clr-namespace:SixR_20.Convertors">

    <!-- derive from Light or Dark theme-->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/FirstFloor.ModernUI;component/Assets/ModernUI.Dark.xaml" />

    </ResourceDictionary.MergedDictionaries>
    <convertor:ColorOpacityConvertor x:Key="ColorOpacityConvertor" />
    <convertor:CompairNumberToBooleanConvertor x:Key="CompairNumberToBooleanConvertor" />
    <convertor:GetMaxHeightConverter x:Key="GetMaxHeightConverter" />
    <convertor:GetMaxWidthConverter x:Key="GetMaxWidthConverter" />
    <convertor:BooleanToVisibilityConvertor x:Key="BooleanToVisibilityConvertor" />
    <convertor:BrushOpacityConvertor x:Key="BrushOpacityConvertor" />
    <convertor:HeightToMarginConvertor x:Key="HeightToMarginConvertor" />
    <!-- specify the accent color (optional) -->
    
    <Color x:Key="TextColor">#fefefe</Color>
    <Color x:Key="DangerColor">#ff7676</Color>
    <Color x:Key="InfoColor">#2cabe3</Color>
    <Color x:Key="SuccessColor">#53e69d</Color>
    <Color x:Key="PrimaryColor">#707cd2</Color>
    <Color x:Key="DefaultColor">#2f323e</Color>
    <Color x:Key="WarningColor">#ffc36d</Color>
    <Color x:Key="InnerBackground">#3c4452</Color>
    <SolidColorBrush x:Key="TextBrush">#fefefe</SolidColorBrush>
    <SolidColorBrush x:Key="DangerBrush">#ff7676</SolidColorBrush>
    <SolidColorBrush x:Key="InfoBrush">#2cabe3</SolidColorBrush>
    <SolidColorBrush x:Key="SuccessBrush">#53e69d</SolidColorBrush>
    <SolidColorBrush x:Key="PrimaryBrush">#707cd2</SolidColorBrush>
    <SolidColorBrush x:Key="DefaultBrush">#2f323e</SolidColorBrush>
    <SolidColorBrush x:Key="WarningBrush">#ffc36d</SolidColorBrush>
    <SolidColorBrush x:Key="WindowBackgroundColor">#3c4452</SolidColorBrush>
    <SolidColorBrush x:Key="WindowBackground">#3c4452</SolidColorBrush>
    <SolidColorBrush x:Key="WindowBorder">#3c4452</SolidColorBrush>
    <SolidColorBrush x:Key="WindowBorderActive">#ff8307</SolidColorBrush>
    <SolidColorBrush x:Key="WindowText">#000000</SolidColorBrush>
    <Style x:Key="MdiFont">
        <Setter Property="TextElement.FontFamily"
                Value="Resources/#mdi" />
    </Style>
    <Style x:Key="ItemControllStyle"
           TargetType="{x:Type ItemsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border x:Name="TheBorder"
                            BorderThickness="0"
                            Padding="10"
                            Margin="{TemplateBinding Margin}"
                            BorderBrush="{TemplateBinding Background}"
                            >
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <!--<Border.Effect>
                            <DropShadowEffect ShadowDepth="0"
                                              Color="#000000"
                                              Opacity="1"
                                              BlurRadius="4" />
                        </Border.Effect>-->
                        <Border.Background>
                            <!--<LinearGradientBrush StartPoint="0.5,0"
                                                 EndPoint="0.5,1"
                                                 ColorInterpolationMode="SRgbLinearInterpolation">
                                <GradientStop Color="{Binding RelativeSource={ RelativeSource AncestorType=ItemsControl} ,Path=Background,Converter={StaticResource ColorOpacityConvertor}, ConverterParameter=1 }"
                                              Offset="0">

                                </GradientStop>
                                <GradientStop Color="{Binding RelativeSource={ RelativeSource AncestorType=ItemsControl} ,Path=Background,Converter={StaticResource ColorOpacityConvertor}, ConverterParameter=0.8 }"
                                              Offset="1" />
                            </LinearGradientBrush>-->
                            <SolidColorBrush  Color="{Binding RelativeSource={ RelativeSource AncestorType=ItemsControl} ,Path=Background,Converter={StaticResource ColorOpacityConvertor}, ConverterParameter=1 }"></SolidColorBrush>
                        </Border.Background>
                    </Border>

                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <!--<Setter Property="Width"
                Value="{Binding RelativeSource={ RelativeSource AncestorType=Grid} ,Path=ActualWidth }"></Setter>
        <Setter Property="Height"
                Value="{Binding RelativeSource={ RelativeSource AncestorType=Grid} ,Path=ActualHeight }"></Setter>-->
    </Style>
    <Style x:Key="ContentControlStyle"
           TargetType="{x:Type Selector}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Selector}">
                    <Border x:Name="TheBorder"
                            BorderThickness="0"
                            Padding="10"
                            Margin="{TemplateBinding Margin}"
                            BorderBrush="{TemplateBinding Background}">
                        <ContentPresenter  />
                        <Border.Background>
                            <SolidColorBrush  Color="{Binding RelativeSource={ RelativeSource AncestorType=ItemsControl} ,Path=Background,Converter={StaticResource ColorOpacityConvertor}, ConverterParameter=1 }"></SolidColorBrush>
                        </Border.Background>
                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="Width"
                Value="{Binding RelativeSource={ RelativeSource AncestorType=Grid} ,Path=ActualWidth }"></Setter>
        <Setter Property="Height"
                Value="{Binding RelativeSource={ RelativeSource AncestorType=Grid} ,Path=ActualHeight }"></Setter>
    </Style>
    <Style  x:Key="SpinStyle" TargetType="materialDesign:PackIcon">
        <Setter Property="Height"
                Value="16" />
        <Setter Property="Width"
                Value="16" />
        <Setter Property="HorizontalAlignment"
                Value="Left" />
        <Setter Property="VerticalAlignment"
                Value="Top" />
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform Angle="0"
                                 CenterX="1"
                                 CenterY="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="materialDesign:PackIcon">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Viewbox FlowDirection="{TemplateBinding FlowDirection}">
                            <Canvas Width="24"
                                    Height="24">
                                <Path Data="{Binding Data, RelativeSource={RelativeSource TemplatedParent}}"
                                      Fill="{TemplateBinding Foreground}" />
                            </Canvas>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsVisible"
                     Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle"
                                             From="0"
                                             To="360"
                                             Duration="0:0:1"
                                             RepeatBehavior="Forever" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SixRButtonLeftRight" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0}"/>
        <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="-10,0,-10,0"></Setter>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0.2}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0.3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0.2}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SixRButtonTopBottom" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0}"/>
        <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,-10,0,-10"></Setter>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0.2}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0.3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource TextBrush}, Converter={StaticResource BrushOpacityConvertor},ConverterParameter=0.2}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridContentCellCentering" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FontAwsome" TargetType="{x:Type fa:FontAwesome}" BasedOn="{StaticResource {x:Type fa:FontAwesome}}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{StaticResource InfoBrush}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary> 