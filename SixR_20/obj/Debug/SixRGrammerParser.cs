//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\D\WorkSpace\TwinCat\SixR_20\SixR_20\Interpreter\SixRGrammer.g4 by ANTLR 4.6.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SixR_20.Interpreter {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class SixRGrammerParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, AND=19, ANIN=20, ANOUT=21, B_AND=22, B_NOT=23, B_OR=24, B_EXOR=25, 
		BOOL=26, BREAK=27, C_DIS=28, C_ORI=29, C_PTP=30, C_VEL=31, CASE=32, CAST_FROM=33, 
		CAST_TO=34, CHAR=35, CIR_REL=36, CIR=37, CONST=38, CONTINUE=39, DELAY=40, 
		DECL=41, DEF=42, DEFAULT=43, DEFDAT=44, DEFFCT=45, DO=46, ELSE=47, END=48, 
		ENDDAT=49, ENDFCT=50, ENDFOR=51, ENDIF=52, ENDLOOP=53, ENDSWITCH=54, ENDWHILE=55, 
		ENUM=56, EXIT=57, EXT=58, EXTFCT=59, FALSE=60, FOR=61, GLOBAL=62, GOTO=63, 
		HALT=64, IF=65, IMPORT=66, INTERRUPT=67, INT=68, IS=69, LIN_REL=70, LIN=71, 
		LOOP=72, MAIN=73, MAXIMUM=74, MINIMUM=75, NOT=76, OR=77, PRIO=78, PTP_REL=79, 
		PTP=80, PUBLIC=81, FLOAT=82, REPEAT=83, RETURN=84, SEC=85, SIGNAL=86, 
		STRUC=87, SWITCH=88, THEN=89, TO=90, TRIGGER=91, TRUE=92, UNTIL=93, WAIT=94, 
		WHEN=95, WHILE=96, EXOR=97, STARTPROG=98, ENDPROG=99, POINTJ=100, POINTP=101, 
		POS=102, ORIENT=103, VECTOR=104, CON=105, XX=106, YY=107, ZZ=108, AA=109, 
		BB=110, CC=111, FF=112, J1=113, J2=114, J3=115, J4=116, J5=117, J6=118, 
		FragINTLITERAL=119, FragFLOATLITERAL=120, FragCHARLITERAL=121, FragSTRINGLITERAL=122, 
		IDENTIFIER=123, NEWLINE=124, WS=125;
	public const int
		RULE_start = 0, RULE_moduleRoutines = 1, RULE_mainRoutine = 2, RULE_subRoutine = 3, 
		RULE_procedureName = 4, RULE_formalParameters = 5, RULE_parameter = 6, 
		RULE_routineBody = 7, RULE_statementList = 8, RULE_statement = 9, RULE_variableDeclaration = 10, 
		RULE_variableInitialisation = 11, RULE_variableListRest = 12, RULE_assignmentExpression = 13, 
		RULE_sixRJPR = 14, RULE_sixRJXPoint = 15, RULE_sixRPPoint = 16, RULE_sixRPosition = 17, 
		RULE_sixROrientation = 18, RULE_sixRJPoint = 19, RULE_sixRJPart = 20, 
		RULE_sixRRPPart = 21, RULE_sixRPPart = 22, RULE_sixRRPart = 23, RULE_variableName = 24, 
		RULE_arrayVariableSuffix = 25, RULE_expression = 26, RULE_relationalOp = 27, 
		RULE_conditionalOrExpression = 28, RULE_exclusiveOrExpression = 29, RULE_conditionalAndExpression = 30, 
		RULE_additiveExpression = 31, RULE_multiplicativeExpression = 32, RULE_unaryNotExpression = 33, 
		RULE_unaryPlusMinuxExpression = 34, RULE_primary = 35, RULE_literal = 36, 
		RULE_intLITERAL = 37, RULE_floatLITERAL = 38, RULE_charLITERAL = 39, RULE_stringLITERAL = 40, 
		RULE_numberLITERAL = 41, RULE_booleanLiteral = 42, RULE_parExpression = 43, 
		RULE_type = 44, RULE_sixRPrimitiveType = 45, RULE_primitiveType = 46;
	public static readonly string[] ruleNames = {
		"start", "moduleRoutines", "mainRoutine", "subRoutine", "procedureName", 
		"formalParameters", "parameter", "routineBody", "statementList", "statement", 
		"variableDeclaration", "variableInitialisation", "variableListRest", "assignmentExpression", 
		"sixRJPR", "sixRJXPoint", "sixRPPoint", "sixRPosition", "sixROrientation", 
		"sixRJPoint", "sixRJPart", "sixRRPPart", "sixRPPart", "sixRRPart", "variableName", 
		"arrayVariableSuffix", "expression", "relationalOp", "conditionalOrExpression", 
		"exclusiveOrExpression", "conditionalAndExpression", "additiveExpression", 
		"multiplicativeExpression", "unaryNotExpression", "unaryPlusMinuxExpression", 
		"primary", "literal", "intLITERAL", "floatLITERAL", "charLITERAL", "stringLITERAL", 
		"numberLITERAL", "booleanLiteral", "parExpression", "type", "sixRPrimitiveType", 
		"primitiveType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'='", "'['", "']'", "':'", "'=='", "'!='", 
		"'<='", "'>='", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "AND", "ANIN", "ANOUT", "B_AND", 
		"B_NOT", "B_OR", "B_EXOR", "BOOL", "BREAK", "C_DIS", "C_ORI", "C_PTP", 
		"C_VEL", "CASE", "CAST_FROM", "CAST_TO", "CHAR", "CIR_REL", "CIR", "CONST", 
		"CONTINUE", "DELAY", "DECL", "DEF", "DEFAULT", "DEFDAT", "DEFFCT", "DO", 
		"ELSE", "END", "ENDDAT", "ENDFCT", "ENDFOR", "ENDIF", "ENDLOOP", "ENDSWITCH", 
		"ENDWHILE", "ENUM", "EXIT", "EXT", "EXTFCT", "FALSE", "FOR", "GLOBAL", 
		"GOTO", "HALT", "IF", "IMPORT", "INTERRUPT", "INT", "IS", "LIN_REL", "LIN", 
		"LOOP", "MAIN", "MAXIMUM", "MINIMUM", "NOT", "OR", "PRIO", "PTP_REL", 
		"PTP", "PUBLIC", "FLOAT", "REPEAT", "RETURN", "SEC", "SIGNAL", "STRUC", 
		"SWITCH", "THEN", "TO", "TRIGGER", "TRUE", "UNTIL", "WAIT", "WHEN", "WHILE", 
		"EXOR", "STARTPROG", "ENDPROG", "POINTJ", "POINTP", "POS", "ORIENT", "VECTOR", 
		"CON", "XX", "YY", "ZZ", "AA", "BB", "CC", "FF", "J1", "J2", "J3", "J4", 
		"J5", "J6", "FragINTLITERAL", "FragFLOATLITERAL", "FragCHARLITERAL", "FragSTRINGLITERAL", 
		"IDENTIFIER", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SixRGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SixRGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ModuleRoutinesContext moduleRoutines() {
			return GetRuleContext<ModuleRoutinesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SixRGrammerParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; moduleRoutines();
			State = 95; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleRoutinesContext : ParserRuleContext {
		public MainRoutineContext[] mainRoutine() {
			return GetRuleContexts<MainRoutineContext>();
		}
		public MainRoutineContext mainRoutine(int i) {
			return GetRuleContext<MainRoutineContext>(i);
		}
		public SubRoutineContext[] subRoutine() {
			return GetRuleContexts<SubRoutineContext>();
		}
		public SubRoutineContext subRoutine(int i) {
			return GetRuleContext<SubRoutineContext>(i);
		}
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(SixRGrammerParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SixRGrammerParser.NEWLINE, i);
		}
		public ModuleRoutinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleRoutines; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterModuleRoutines(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitModuleRoutines(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleRoutines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleRoutinesContext moduleRoutines() {
		ModuleRoutinesContext _localctx = new ModuleRoutinesContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_moduleRoutines);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BOOL || _la==CHAR || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INT - 68)) | (1L << (MAIN - 68)) | (1L << (FLOAT - 68)) | (1L << (POINTJ - 68)) | (1L << (POINTP - 68)) | (1L << (POS - 68)) | (1L << (ORIENT - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (NEWLINE - 68)))) != 0)) {
				{
				State = 101;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 97; mainRoutine();
					}
					break;

				case 2:
					{
					State = 98; subRoutine();
					}
					break;

				case 3:
					{
					State = 99; variableDeclaration();
					}
					break;

				case 4:
					{
					State = 100; Match(NEWLINE);
					}
					break;
				}
				}
				State = 105;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainRoutineContext : ParserRuleContext {
		public ITerminalNode MAIN() { return GetToken(SixRGrammerParser.MAIN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(SixRGrammerParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SixRGrammerParser.NEWLINE, i);
		}
		public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		public ITerminalNode END() { return GetToken(SixRGrammerParser.END, 0); }
		public ITerminalNode INT() { return GetToken(SixRGrammerParser.INT, 0); }
		public MainRoutineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainRoutine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterMainRoutine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitMainRoutine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainRoutine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainRoutineContext mainRoutine() {
		MainRoutineContext _localctx = new MainRoutineContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_mainRoutine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INT) {
				{
				State = 106; Match(INT);
				}
			}

			State = 109; Match(MAIN);
			State = 110; Match(T__0);
			State = 111; Match(T__1);
			State = 112; Match(NEWLINE);
			State = 113; routineBody();
			State = 114; Match(END);
			State = 116;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 115; Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubRoutineContext : ParserRuleContext {
		public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(SixRGrammerParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SixRGrammerParser.NEWLINE, i);
		}
		public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		public ITerminalNode END() { return GetToken(SixRGrammerParser.END, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SubRoutineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subRoutine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSubRoutine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSubRoutine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubRoutine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubRoutineContext subRoutine() {
		SubRoutineContext _localctx = new SubRoutineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_subRoutine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BOOL || _la==CHAR || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INT - 68)) | (1L << (FLOAT - 68)) | (1L << (POINTJ - 68)) | (1L << (POINTP - 68)) | (1L << (POS - 68)) | (1L << (ORIENT - 68)))) != 0)) {
				{
				State = 118; type();
				}
			}

			State = 121; procedureName();
			State = 122; Match(T__0);
			State = 123; formalParameters();
			State = 124; Match(T__1);
			State = 125; Match(NEWLINE);
			State = 126; routineBody();
			State = 127; Match(END);
			State = 129;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 128; Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SixRGrammerParser.IDENTIFIER, 0); }
		public ProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterProcedureName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitProcedureName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameContext procedureName() {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_procedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BOOL || _la==CHAR || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INT - 68)) | (1L << (FLOAT - 68)) | (1L << (POINTJ - 68)) | (1L << (POINTP - 68)) | (1L << (POS - 68)) | (1L << (ORIENT - 68)))) != 0)) {
				{
				State = 133; parameter();
				State = 138;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__2) {
					{
					{
					State = 134; Match(T__2);
					State = 135; parameter();
					}
					}
					State = 140;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; type();
			State = 144; variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineBodyContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterRoutineBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitRoutineBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineBodyContext routineBody() {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_routineBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__13) | (1L << T__14) | (1L << T__17) | (1L << BOOL) | (1L << BREAK) | (1L << CHAR) | (1L << CIR) | (1L << CONTINUE) | (1L << FALSE) | (1L << FOR))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (IF - 65)) | (1L << (INT - 65)) | (1L << (LIN - 65)) | (1L << (NOT - 65)) | (1L << (PTP - 65)) | (1L << (FLOAT - 65)) | (1L << (RETURN - 65)) | (1L << (TRUE - 65)) | (1L << (WAIT - 65)) | (1L << (WHILE - 65)) | (1L << (POINTJ - 65)) | (1L << (POINTP - 65)) | (1L << (POS - 65)) | (1L << (ORIENT - 65)) | (1L << (FragINTLITERAL - 65)) | (1L << (FragFLOATLITERAL - 65)) | (1L << (FragCHARLITERAL - 65)) | (1L << (FragSTRINGLITERAL - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (NEWLINE - 65)))) != 0)) {
				{
				{
				State = 148; statement();
				}
				}
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class STATASINEPRContext : StatementContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATASINEPRContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATASINEPR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATASINEPR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATASINEPR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATBRAKEContext : StatementContext {
		public ITerminalNode BREAK() { return GetToken(SixRGrammerParser.BREAK, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATBRAKEContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATBRAKE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATBRAKE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATBRAKE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATRETURNContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(SixRGrammerParser.RETURN, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public STATRETURNContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATRETURN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATRETURN(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATRETURN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATLINContext : StatementContext {
		public ITerminalNode LIN() { return GetToken(SixRGrammerParser.LIN, 0); }
		public SixRJXPointContext sixRJXPoint() {
			return GetRuleContext<SixRJXPointContext>(0);
		}
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public ITerminalNode FF() { return GetToken(SixRGrammerParser.FF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CON() { return GetToken(SixRGrammerParser.CON, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATLINContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATLIN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATLIN(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATLIN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATWHILEContext : StatementContext {
		public ITerminalNode WHILE() { return GetToken(SixRGrammerParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(SixRGrammerParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SixRGrammerParser.NEWLINE, i);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode ENDWHILE() { return GetToken(SixRGrammerParser.ENDWHILE, 0); }
		public STATWHILEContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATWHILE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATWHILE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATWHILE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATEXPContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATEXPContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATEXP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATEXP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATEXP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATPTPContext : StatementContext {
		public ITerminalNode PTP() { return GetToken(SixRGrammerParser.PTP, 0); }
		public SixRJXPointContext sixRJXPoint() {
			return GetRuleContext<SixRJXPointContext>(0);
		}
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public ITerminalNode FF() { return GetToken(SixRGrammerParser.FF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CON() { return GetToken(SixRGrammerParser.CON, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATPTPContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATPTP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATPTP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATPTP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATFORContext : StatementContext {
		public ITerminalNode FOR() { return GetToken(SixRGrammerParser.FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SixRGrammerParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TO() { return GetToken(SixRGrammerParser.TO, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(SixRGrammerParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SixRGrammerParser.NEWLINE, i);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode ENDFOR() { return GetToken(SixRGrammerParser.ENDFOR, 0); }
		public STATFORContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATFOR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATFOR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATFOR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATWAITSECContext : StatementContext {
		public ITerminalNode WAIT() { return GetToken(SixRGrammerParser.WAIT, 0); }
		public ITerminalNode SEC() { return GetToken(SixRGrammerParser.SEC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATWAITSECContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATWAITSEC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATWAITSEC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATWAITSEC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATNEWLINEContext : StatementContext {
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATNEWLINEContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATNEWLINE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATNEWLINE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATNEWLINE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATCIRContext : StatementContext {
		public ITerminalNode CIR() { return GetToken(SixRGrammerParser.CIR, 0); }
		public SixRJXPointContext[] sixRJXPoint() {
			return GetRuleContexts<SixRJXPointContext>();
		}
		public SixRJXPointContext sixRJXPoint(int i) {
			return GetRuleContext<SixRJXPointContext>(i);
		}
		public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode FF() { return GetToken(SixRGrammerParser.FF, 0); }
		public ITerminalNode CON() { return GetToken(SixRGrammerParser.CON, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATCIRContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATCIR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATCIR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATCIR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATVARDECContext : StatementContext {
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public STATVARDECContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATVARDEC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATVARDEC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATVARDEC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATIFContext : StatementContext {
		public ITerminalNode IF() { return GetToken(SixRGrammerParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(SixRGrammerParser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(SixRGrammerParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SixRGrammerParser.NEWLINE, i);
		}
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public ITerminalNode ENDIF() { return GetToken(SixRGrammerParser.ENDIF, 0); }
		public ITerminalNode ELSE() { return GetToken(SixRGrammerParser.ELSE, 0); }
		public STATIFContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATIF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATIF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATWAITFORContext : StatementContext {
		public ITerminalNode WAIT() { return GetToken(SixRGrammerParser.WAIT, 0); }
		public ITerminalNode FOR() { return GetToken(SixRGrammerParser.FOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATWAITFORContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATWAITFOR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATWAITFOR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATWAITFOR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STATCONTINUEContext : StatementContext {
		public ITerminalNode CONTINUE() { return GetToken(SixRGrammerParser.CONTINUE, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SixRGrammerParser.NEWLINE, 0); }
		public STATCONTINUEContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSTATCONTINUE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSTATCONTINUE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTATCONTINUE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_statement);
		int _la;
		try {
			State = 276;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				_localctx = new STATCONTINUEContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; Match(CONTINUE);
				State = 155; Match(NEWLINE);
				}
				break;

			case 2:
				_localctx = new STATFORContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; Match(FOR);
				State = 157; Match(IDENTIFIER);
				State = 158; Match(T__3);
				State = 159; expression();
				State = 160; Match(TO);
				State = 161; expression();
				State = 162; Match(NEWLINE);
				State = 163; statementList();
				State = 164; Match(ENDFOR);
				State = 166;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					State = 165; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new STATIFContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 168; Match(IF);
				State = 169; expression();
				State = 170; Match(THEN);
				State = 171; Match(NEWLINE);
				State = 172; statementList();
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 173; Match(ELSE);
					State = 174; Match(NEWLINE);
					State = 175; statementList();
					}
				}

				State = 178; Match(ENDIF);
				State = 180;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					State = 179; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new STATWAITFORContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 182; Match(WAIT);
				State = 183; Match(FOR);
				State = 184; expression();
				State = 186;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 185; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new STATWAITSECContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 188; Match(WAIT);
				State = 189; Match(SEC);
				State = 190; expression();
				State = 192;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 191; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 6:
				_localctx = new STATWHILEContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 194; Match(WHILE);
				State = 195; expression();
				State = 196; Match(NEWLINE);
				State = 197; statementList();
				State = 198; Match(ENDWHILE);
				State = 200;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 199; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 7:
				_localctx = new STATRETURNContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 202; Match(RETURN);
				State = 204;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__13) | (1L << T__14) | (1L << T__17) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (NOT - 76)) | (1L << (TRUE - 76)) | (1L << (FragINTLITERAL - 76)) | (1L << (FragFLOATLITERAL - 76)) | (1L << (FragCHARLITERAL - 76)) | (1L << (FragSTRINGLITERAL - 76)) | (1L << (IDENTIFIER - 76)))) != 0)) {
					{
					State = 203; expression();
					}
				}

				State = 206; Match(NEWLINE);
				}
				break;

			case 8:
				_localctx = new STATASINEPRContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 207; assignmentExpression();
				State = 209;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 208; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 9:
				_localctx = new STATEXPContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 211; expression();
				State = 213;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 212; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 10:
				_localctx = new STATBRAKEContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 215; Match(BREAK);
				State = 216; Match(NEWLINE);
				}
				break;

			case 11:
				_localctx = new STATNEWLINEContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 217; Match(NEWLINE);
				}
				break;

			case 12:
				_localctx = new STATPTPContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 218; Match(PTP);
				State = 221;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__4:
					{
					State = 219; sixRJXPoint();
					}
					break;
				case IDENTIFIER:
					{
					State = 220; variableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 225;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FF) {
					{
					State = 223; Match(FF);
					State = 224; expression();
					}
				}

				State = 229;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==CON) {
					{
					State = 227; Match(CON);
					State = 228; expression();
					}
				}

				State = 232;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
				case 1:
					{
					State = 231; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 13:
				_localctx = new STATLINContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 234; Match(LIN);
				State = 237;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__4:
					{
					State = 235; sixRJXPoint();
					}
					break;
				case IDENTIFIER:
					{
					State = 236; variableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 241;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FF) {
					{
					State = 239; Match(FF);
					State = 240; expression();
					}
				}

				State = 245;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==CON) {
					{
					State = 243; Match(CON);
					State = 244; expression();
					}
				}

				State = 248;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					State = 247; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 14:
				_localctx = new STATCIRContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 250; Match(CIR);
				State = 253;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__4:
					{
					State = 251; sixRJXPoint();
					}
					break;
				case IDENTIFIER:
					{
					State = 252; variableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 257;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__4:
					{
					State = 255; sixRJXPoint();
					}
					break;
				case IDENTIFIER:
					{
					State = 256; variableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 260;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					State = 259; expression();
					}
					break;
				}
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FF) {
					{
					State = 262; Match(FF);
					State = 263; expression();
					}
				}

				State = 268;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==CON) {
					{
					State = 266; Match(CON);
					State = 267; expression();
					}
				}

				State = 271;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					State = 270; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 15:
				_localctx = new STATVARDECContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				{
				State = 273; variableDeclaration();
				}
				State = 274; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public VariableListRestContext variableListRest() {
			return GetRuleContext<VariableListRestContext>(0);
		}
		public VariableInitialisationContext variableInitialisation() {
			return GetRuleContext<VariableInitialisationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; type();
			State = 279; variableName();
			State = 282;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Eof:
			case T__2:
			case BOOL:
			case CHAR:
			case INT:
			case MAIN:
			case FLOAT:
			case POINTJ:
			case POINTP:
			case POS:
			case ORIENT:
			case IDENTIFIER:
			case NEWLINE:
				{
				State = 280; variableListRest();
				}
				break;
			case T__3:
				{
				State = 281; variableInitialisation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitialisationContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SixRJPRContext sixRJPR() {
			return GetRuleContext<SixRJPRContext>(0);
		}
		public VariableInitialisationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitialisation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterVariableInitialisation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitVariableInitialisation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitialisation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitialisationContext variableInitialisation() {
		VariableInitialisationContext _localctx = new VariableInitialisationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_variableInitialisation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(T__3);
			State = 287;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 285; expression();
				}
				break;

			case 2:
				{
				State = 286; sixRJPR();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListRestContext : ParserRuleContext {
		public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		public VariableListRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterVariableListRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitVariableListRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListRestContext variableListRest() {
		VariableListRestContext _localctx = new VariableListRestContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_variableListRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__2) {
				{
				{
				State = 289; Match(T__2);
				State = 290; variableName();
				}
				}
				State = 295;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SixRJPRContext sixRJPR() {
			return GetRuleContext<SixRJPRContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; variableName();
			State = 297; Match(T__3);
			State = 300;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 298; expression();
				}
				break;

			case 2:
				{
				State = 299; sixRJPR();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRJPRContext : ParserRuleContext {
		public SixRJXPointContext sixRJXPoint() {
			return GetRuleContext<SixRJXPointContext>(0);
		}
		public SixRPositionContext sixRPosition() {
			return GetRuleContext<SixRPositionContext>(0);
		}
		public SixROrientationContext sixROrientation() {
			return GetRuleContext<SixROrientationContext>(0);
		}
		public SixRJPRContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRJPR; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRJPR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRJPR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRJPR(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRJPRContext sixRJPR() {
		SixRJPRContext _localctx = new SixRJPRContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_sixRJPR);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 302; sixRJXPoint();
				}
				break;

			case 2:
				{
				State = 303; sixRPosition();
				}
				break;

			case 3:
				{
				State = 304; sixROrientation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRJXPointContext : ParserRuleContext {
		public SixRPPointContext sixRPPoint() {
			return GetRuleContext<SixRPPointContext>(0);
		}
		public SixRJPointContext sixRJPoint() {
			return GetRuleContext<SixRJPointContext>(0);
		}
		public SixRJXPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRJXPoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRJXPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRJXPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRJXPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRJXPointContext sixRJXPoint() {
		SixRJXPointContext _localctx = new SixRJXPointContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_sixRJXPoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 307; sixRPPoint();
				}
				break;

			case 2:
				{
				State = 308; sixRJPoint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRPPointContext : ParserRuleContext {
		public SixRRPPartContext[] sixRRPPart() {
			return GetRuleContexts<SixRRPPartContext>();
		}
		public SixRRPPartContext sixRRPPart(int i) {
			return GetRuleContext<SixRRPPartContext>(i);
		}
		public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		public SixRPPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRPPoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRPPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRPPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRPPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRPPointContext sixRPPoint() {
		SixRPPointContext _localctx = new SixRPPointContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_sixRPPoint);
		int _la;
		try {
			State = 329;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311; Match(T__4);
				State = 320;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (XX - 106)) | (1L << (YY - 106)) | (1L << (ZZ - 106)) | (1L << (AA - 106)) | (1L << (BB - 106)) | (1L << (CC - 106)))) != 0)) {
					{
					State = 312; sixRRPPart();
					State = 317;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==T__2) {
						{
						{
						State = 313; Match(T__2);
						State = 314; sixRRPPart();
						}
						}
						State = 319;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 322; Match(T__5);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323; Match(T__4);
				State = 324; variableName();
				State = 325; Match(T__2);
				State = 326; variableName();
				State = 327; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRPositionContext : ParserRuleContext {
		public SixRPPartContext[] sixRPPart() {
			return GetRuleContexts<SixRPPartContext>();
		}
		public SixRPPartContext sixRPPart(int i) {
			return GetRuleContext<SixRPPartContext>(i);
		}
		public SixRPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRPosition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRPositionContext sixRPosition() {
		SixRPositionContext _localctx = new SixRPositionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_sixRPosition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(T__0);
			State = 340;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (XX - 106)) | (1L << (YY - 106)) | (1L << (ZZ - 106)))) != 0)) {
				{
				State = 332; sixRPPart();
				State = 337;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__2) {
					{
					{
					State = 333; Match(T__2);
					State = 334; sixRPPart();
					}
					}
					State = 339;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 342; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixROrientationContext : ParserRuleContext {
		public SixRRPartContext[] sixRRPart() {
			return GetRuleContexts<SixRRPartContext>();
		}
		public SixRRPartContext sixRRPart(int i) {
			return GetRuleContext<SixRRPartContext>(i);
		}
		public SixROrientationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixROrientation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixROrientation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixROrientation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixROrientation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixROrientationContext sixROrientation() {
		SixROrientationContext _localctx = new SixROrientationContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_sixROrientation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(T__0);
			State = 353;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (AA - 109)) | (1L << (BB - 109)) | (1L << (CC - 109)))) != 0)) {
				{
				State = 345; sixRRPart();
				State = 350;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__2) {
					{
					{
					State = 346; Match(T__2);
					State = 347; sixRRPart();
					}
					}
					State = 352;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 355; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRJPointContext : ParserRuleContext {
		public SixRJPartContext[] sixRJPart() {
			return GetRuleContexts<SixRJPartContext>();
		}
		public SixRJPartContext sixRJPart(int i) {
			return GetRuleContext<SixRJPartContext>(i);
		}
		public SixRJPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRJPoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRJPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRJPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRJPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRJPointContext sixRJPoint() {
		SixRJPointContext _localctx = new SixRJPointContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_sixRJPoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(T__4);
			State = 366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (J1 - 113)) | (1L << (J2 - 113)) | (1L << (J3 - 113)) | (1L << (J4 - 113)) | (1L << (J5 - 113)) | (1L << (J6 - 113)))) != 0)) {
				{
				State = 358; sixRJPart();
				State = 363;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__2) {
					{
					{
					State = 359; Match(T__2);
					State = 360; sixRJPart();
					}
					}
					State = 365;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 368; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRJPartContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode J1() { return GetToken(SixRGrammerParser.J1, 0); }
		public ITerminalNode J2() { return GetToken(SixRGrammerParser.J2, 0); }
		public ITerminalNode J3() { return GetToken(SixRGrammerParser.J3, 0); }
		public ITerminalNode J4() { return GetToken(SixRGrammerParser.J4, 0); }
		public ITerminalNode J5() { return GetToken(SixRGrammerParser.J5, 0); }
		public ITerminalNode J6() { return GetToken(SixRGrammerParser.J6, 0); }
		public SixRJPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRJPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRJPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRJPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRJPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRJPartContext sixRJPart() {
		SixRJPartContext _localctx = new SixRJPartContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_sixRJPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_la = _input.La(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (J1 - 113)) | (1L << (J2 - 113)) | (1L << (J3 - 113)) | (1L << (J4 - 113)) | (1L << (J5 - 113)) | (1L << (J6 - 113)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 371; Match(T__6);
			State = 372; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRRPPartContext : ParserRuleContext {
		public SixRRPartContext sixRRPart() {
			return GetRuleContext<SixRRPartContext>(0);
		}
		public SixRPPartContext sixRPPart() {
			return GetRuleContext<SixRPPartContext>(0);
		}
		public SixRRPPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRRPPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRRPPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRRPPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRRPPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRRPPartContext sixRRPPart() {
		SixRRPPartContext _localctx = new SixRRPPartContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_sixRRPPart);
		try {
			State = 376;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case AA:
			case BB:
			case CC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374; sixRRPart();
				}
				break;
			case XX:
			case YY:
			case ZZ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375; sixRPPart();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRPPartContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode XX() { return GetToken(SixRGrammerParser.XX, 0); }
		public ITerminalNode YY() { return GetToken(SixRGrammerParser.YY, 0); }
		public ITerminalNode ZZ() { return GetToken(SixRGrammerParser.ZZ, 0); }
		public SixRPPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRPPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRPPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRPPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRPPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRPPartContext sixRPPart() {
		SixRPPartContext _localctx = new SixRPPartContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_sixRPPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			_la = _input.La(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (XX - 106)) | (1L << (YY - 106)) | (1L << (ZZ - 106)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 379; Match(T__6);
			State = 380; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRRPartContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AA() { return GetToken(SixRGrammerParser.AA, 0); }
		public ITerminalNode BB() { return GetToken(SixRGrammerParser.BB, 0); }
		public ITerminalNode CC() { return GetToken(SixRGrammerParser.CC, 0); }
		public SixRRPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRRPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRRPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRRPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRRPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRRPartContext sixRRPart() {
		SixRRPartContext _localctx = new SixRRPartContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_sixRRPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			_la = _input.La(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (AA - 109)) | (1L << (BB - 109)) | (1L << (CC - 109)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 383; Match(T__6);
			State = 384; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SixRGrammerParser.IDENTIFIER, 0); }
		public ArrayVariableSuffixContext arrayVariableSuffix() {
			return GetRuleContext<ArrayVariableSuffixContext>(0);
		}
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(IDENTIFIER);
			State = 388;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 387; arrayVariableSuffix();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayVariableSuffixContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayVariableSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayVariableSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterArrayVariableSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitArrayVariableSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayVariableSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayVariableSuffixContext arrayVariableSuffix() {
		ArrayVariableSuffixContext _localctx = new ArrayVariableSuffixContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_arrayVariableSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(T__4);
			{
			State = 391; expression();
			State = 396;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__2) {
				{
				{
				State = 392; Match(T__2);
				State = 393; expression();
				}
				}
				State = 398;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
			State = 399; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalOrExpressionContext[] conditionalOrExpression() {
			return GetRuleContexts<ConditionalOrExpressionContext>();
		}
		public ConditionalOrExpressionContext conditionalOrExpression(int i) {
			return GetRuleContext<ConditionalOrExpressionContext>(i);
		}
		public RelationalOpContext[] relationalOp() {
			return GetRuleContexts<RelationalOpContext>();
		}
		public RelationalOpContext relationalOp(int i) {
			return GetRuleContext<RelationalOpContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_expression);
		int _la;
		try {
			State = 424;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401; procedureName();
				State = 402; Match(T__0);
				State = 411;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__13) | (1L << T__14) | (1L << T__17) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (NOT - 76)) | (1L << (TRUE - 76)) | (1L << (FragINTLITERAL - 76)) | (1L << (FragFLOATLITERAL - 76)) | (1L << (FragCHARLITERAL - 76)) | (1L << (FragSTRINGLITERAL - 76)) | (1L << (IDENTIFIER - 76)))) != 0)) {
					{
					State = 403; expression();
					State = 408;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==T__2) {
						{
						{
						State = 404; Match(T__2);
						State = 405; expression();
						}
						}
						State = 410;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 413; Match(T__1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 415; conditionalOrExpression();
				State = 421;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
					{
					{
					State = 416; relationalOp();
					State = 417; conditionalOrExpression();
					}
					}
					State = 423;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOpContext : ParserRuleContext {
		public RelationalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterRelationalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitRelationalOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOpContext relationalOp() {
		RelationalOpContext _localctx = new RelationalOpContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_relationalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(SixRGrammerParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(SixRGrammerParser.OR, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; exclusiveOrExpression();
			State = 433;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				{
				State = 429; Match(OR);
				}
				State = 430; exclusiveOrExpression();
				}
				}
				State = 435;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		public ITerminalNode[] EXOR() { return GetTokens(SixRGrammerParser.EXOR); }
		public ITerminalNode EXOR(int i) {
			return GetToken(SixRGrammerParser.EXOR, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; conditionalAndExpression();
			State = 441;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EXOR) {
				{
				{
				{
				State = 437; Match(EXOR);
				}
				State = 438; conditionalAndExpression();
				}
				}
				State = 443;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(SixRGrammerParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(SixRGrammerParser.AND, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; additiveExpression();
			State = 449;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				{
				State = 445; Match(AND);
				}
				State = 446; additiveExpression();
				}
				}
				State = 451;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_additiveExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; multiplicativeExpression();
			State = 457;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 453;
					_la = _input.La(1);
					if ( !(_la==T__13 || _la==T__14) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 454; multiplicativeExpression();
					}
					} 
				}
				State = 459;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryNotExpressionContext[] unaryNotExpression() {
			return GetRuleContexts<UnaryNotExpressionContext>();
		}
		public UnaryNotExpressionContext unaryNotExpression(int i) {
			return GetRuleContext<UnaryNotExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; unaryNotExpression();
			State = 465;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__15 || _la==T__16) {
				{
				{
				State = 461;
				_la = _input.La(1);
				if ( !(_la==T__15 || _la==T__16) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 462; unaryNotExpression();
				}
				}
				State = 467;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryNotExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(SixRGrammerParser.NOT, 0); }
		public UnaryNotExpressionContext unaryNotExpression() {
			return GetRuleContext<UnaryNotExpressionContext>(0);
		}
		public UnaryPlusMinuxExpressionContext unaryPlusMinuxExpression() {
			return GetRuleContext<UnaryPlusMinuxExpressionContext>(0);
		}
		public UnaryNotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryNotExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterUnaryNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitUnaryNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryNotExpressionContext unaryNotExpression() {
		UnaryNotExpressionContext _localctx = new UnaryNotExpressionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_unaryNotExpression);
		try {
			State = 473;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468; Match(NOT);
				State = 469; unaryNotExpression();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 470; Match(T__17);
				State = 471; unaryNotExpression();
				}
				break;
			case T__0:
			case T__13:
			case T__14:
			case FALSE:
			case TRUE:
			case FragINTLITERAL:
			case FragFLOATLITERAL:
			case FragCHARLITERAL:
			case FragSTRINGLITERAL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 472; unaryPlusMinuxExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryPlusMinuxExpressionContext : ParserRuleContext {
		public UnaryPlusMinuxExpressionContext unaryPlusMinuxExpression() {
			return GetRuleContext<UnaryPlusMinuxExpressionContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryPlusMinuxExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryPlusMinuxExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterUnaryPlusMinuxExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitUnaryPlusMinuxExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusMinuxExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryPlusMinuxExpressionContext unaryPlusMinuxExpression() {
		UnaryPlusMinuxExpressionContext _localctx = new UnaryPlusMinuxExpressionContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_unaryPlusMinuxExpression);
		try {
			State = 480;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475; Match(T__13);
				State = 476; unaryPlusMinuxExpression();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477; Match(T__14);
				State = 478; unaryPlusMinuxExpression();
				}
				break;
			case T__0:
			case FALSE:
			case TRUE:
			case FragINTLITERAL:
			case FragFLOATLITERAL:
			case FragCHARLITERAL:
			case FragSTRINGLITERAL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 479; primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_primary);
		try {
			State = 485;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482; parExpression();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483; variableName();
				}
				break;
			case FALSE:
			case TRUE:
			case FragINTLITERAL:
			case FragFLOATLITERAL:
			case FragCHARLITERAL:
			case FragSTRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 484; literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NumberLITERALContext numberLITERAL() {
			return GetRuleContext<NumberLITERALContext>(0);
		}
		public CharLITERALContext charLITERAL() {
			return GetRuleContext<CharLITERALContext>(0);
		}
		public StringLITERALContext stringLITERAL() {
			return GetRuleContext<StringLITERALContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_literal);
		try {
			State = 491;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FragINTLITERAL:
			case FragFLOATLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 487; numberLITERAL();
				}
				break;
			case FragCHARLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488; charLITERAL();
				}
				break;
			case FragSTRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 489; stringLITERAL();
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 490; booleanLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLITERALContext : ParserRuleContext {
		public ITerminalNode FragINTLITERAL() { return GetToken(SixRGrammerParser.FragINTLITERAL, 0); }
		public IntLITERALContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLITERAL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterIntLITERAL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitIntLITERAL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLITERAL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLITERALContext intLITERAL() {
		IntLITERALContext _localctx = new IntLITERALContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_intLITERAL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; Match(FragINTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLITERALContext : ParserRuleContext {
		public ITerminalNode FragFLOATLITERAL() { return GetToken(SixRGrammerParser.FragFLOATLITERAL, 0); }
		public FloatLITERALContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLITERAL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterFloatLITERAL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitFloatLITERAL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLITERAL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLITERALContext floatLITERAL() {
		FloatLITERALContext _localctx = new FloatLITERALContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_floatLITERAL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(FragFLOATLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLITERALContext : ParserRuleContext {
		public ITerminalNode FragCHARLITERAL() { return GetToken(SixRGrammerParser.FragCHARLITERAL, 0); }
		public CharLITERALContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLITERAL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterCharLITERAL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitCharLITERAL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLITERAL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLITERALContext charLITERAL() {
		CharLITERALContext _localctx = new CharLITERALContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_charLITERAL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(FragCHARLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLITERALContext : ParserRuleContext {
		public ITerminalNode FragSTRINGLITERAL() { return GetToken(SixRGrammerParser.FragSTRINGLITERAL, 0); }
		public StringLITERALContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLITERAL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterStringLITERAL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitStringLITERAL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLITERAL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLITERALContext stringLITERAL() {
		StringLITERALContext _localctx = new StringLITERALContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_stringLITERAL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; Match(FragSTRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLITERALContext : ParserRuleContext {
		public IntLITERALContext intLITERAL() {
			return GetRuleContext<IntLITERALContext>(0);
		}
		public FloatLITERALContext floatLITERAL() {
			return GetRuleContext<FloatLITERALContext>(0);
		}
		public NumberLITERALContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLITERAL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterNumberLITERAL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitNumberLITERAL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLITERAL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLITERALContext numberLITERAL() {
		NumberLITERALContext _localctx = new NumberLITERALContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_numberLITERAL);
		try {
			State = 503;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FragINTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501; intLITERAL();
				}
				break;
			case FragFLOATLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 502; floatLITERAL();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(SixRGrammerParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(SixRGrammerParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(T__0);
			State = 508; expression();
			State = 509; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public SixRPrimitiveTypeContext sixRPrimitiveType() {
			return GetRuleContext<SixRPrimitiveTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_type);
		try {
			State = 513;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 511; primitiveType();
				}
				break;
			case POINTJ:
			case POINTP:
			case POS:
			case ORIENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512; sixRPrimitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SixRPrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode POS() { return GetToken(SixRGrammerParser.POS, 0); }
		public ITerminalNode ORIENT() { return GetToken(SixRGrammerParser.ORIENT, 0); }
		public ITerminalNode POINTJ() { return GetToken(SixRGrammerParser.POINTJ, 0); }
		public ITerminalNode POINTP() { return GetToken(SixRGrammerParser.POINTP, 0); }
		public SixRPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sixRPrimitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterSixRPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitSixRPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSixRPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SixRPrimitiveTypeContext sixRPrimitiveType() {
		SixRPrimitiveTypeContext _localctx = new SixRPrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_sixRPrimitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			_la = _input.La(1);
			if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (POINTJ - 100)) | (1L << (POINTP - 100)) | (1L << (POS - 100)) | (1L << (ORIENT - 100)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(SixRGrammerParser.BOOL, 0); }
		public ITerminalNode CHAR() { return GetToken(SixRGrammerParser.CHAR, 0); }
		public ITerminalNode INT() { return GetToken(SixRGrammerParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(SixRGrammerParser.FLOAT, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISixRGrammerListener typedListener = listener as ISixRGrammerListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISixRGrammerVisitor<TResult> typedVisitor = visitor as ISixRGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			_la = _input.La(1);
			if ( !(((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (BOOL - 26)) | (1L << (CHAR - 26)) | (1L << (INT - 26)) | (1L << (FLOAT - 26)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x7F\x20A\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x3\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\a\x3h\n\x3\f\x3\xE\x3k\v\x3\x3\x4\x5\x4n\n\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4w\n\x4\x3\x5\x5\x5z\n\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x84\n\x5\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\a\a\a\x8B\n\a\f\a\xE\a\x8E\v\a\x5\a\x90\n\a\x3\b\x3"+
		"\b\x3\b\x3\t\x3\t\x3\n\a\n\x98\n\n\f\n\xE\n\x9B\v\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xA9\n\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xB3\n\v\x3\v\x3\v\x5\v\xB7\n\v\x3\v\x3"+
		"\v\x3\v\x3\v\x5\v\xBD\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\xC3\n\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x5\v\xCB\n\v\x3\v\x3\v\x5\v\xCF\n\v\x3\v\x3\v\x3\v\x5"+
		"\v\xD4\n\v\x3\v\x3\v\x5\v\xD8\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xE0"+
		"\n\v\x3\v\x3\v\x5\v\xE4\n\v\x3\v\x3\v\x5\v\xE8\n\v\x3\v\x5\v\xEB\n\v\x3"+
		"\v\x3\v\x3\v\x5\v\xF0\n\v\x3\v\x3\v\x5\v\xF4\n\v\x3\v\x3\v\x5\v\xF8\n"+
		"\v\x3\v\x5\v\xFB\n\v\x3\v\x3\v\x3\v\x5\v\x100\n\v\x3\v\x3\v\x5\v\x104"+
		"\n\v\x3\v\x5\v\x107\n\v\x3\v\x3\v\x5\v\x10B\n\v\x3\v\x3\v\x5\v\x10F\n"+
		"\v\x3\v\x5\v\x112\n\v\x3\v\x3\v\x3\v\x5\v\x117\n\v\x3\f\x3\f\x3\f\x3\f"+
		"\x5\f\x11D\n\f\x3\r\x3\r\x3\r\x5\r\x122\n\r\x3\xE\x3\xE\a\xE\x126\n\xE"+
		"\f\xE\xE\xE\x129\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x12F\n\xF\x3\x10\x3"+
		"\x10\x3\x10\x5\x10\x134\n\x10\x3\x11\x3\x11\x5\x11\x138\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\a\x12\x13E\n\x12\f\x12\xE\x12\x141\v\x12\x5\x12\x143"+
		"\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x14C\n"+
		"\x12\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x152\n\x13\f\x13\xE\x13\x155\v"+
		"\x13\x5\x13\x157\n\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\a\x14"+
		"\x15F\n\x14\f\x14\xE\x14\x162\v\x14\x5\x14\x164\n\x14\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\a\x15\x16C\n\x15\f\x15\xE\x15\x16F\v\x15\x5"+
		"\x15\x171\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x5\x17\x17B\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x5\x1A\x187\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B"+
		"\x18D\n\x1B\f\x1B\xE\x1B\x190\v\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\a\x1C\x199\n\x1C\f\x1C\xE\x1C\x19C\v\x1C\x5\x1C\x19E\n"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x1A6\n\x1C\f\x1C"+
		"\xE\x1C\x1A9\v\x1C\x5\x1C\x1AB\n\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E"+
		"\a\x1E\x1B2\n\x1E\f\x1E\xE\x1E\x1B5\v\x1E\x3\x1F\x3\x1F\x3\x1F\a\x1F\x1BA"+
		"\n\x1F\f\x1F\xE\x1F\x1BD\v\x1F\x3 \x3 \x3 \a \x1C2\n \f \xE \x1C5\v \x3"+
		"!\x3!\x3!\a!\x1CA\n!\f!\xE!\x1CD\v!\x3\"\x3\"\x3\"\a\"\x1D2\n\"\f\"\xE"+
		"\"\x1D5\v\"\x3#\x3#\x3#\x3#\x3#\x5#\x1DC\n#\x3$\x3$\x3$\x3$\x3$\x5$\x1E3"+
		"\n$\x3%\x3%\x3%\x5%\x1E8\n%\x3&\x3&\x3&\x3&\x5&\x1EE\n&\x3\'\x3\'\x3("+
		"\x3(\x3)\x3)\x3*\x3*\x3+\x3+\x5+\x1FA\n+\x3,\x3,\x3-\x3-\x3-\x3-\x3.\x3"+
		".\x5.\x204\n.\x3/\x3/\x3\x30\x3\x30\x3\x30\x2\x2\x2\x31\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C"+
		"\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2"+
		"\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T"+
		"\x2V\x2X\x2Z\x2\\\x2^\x2\x2\v\x3\x2sx\x3\x2ln\x3\x2oq\x3\x2\n\xF\x3\x2"+
		"\x10\x11\x3\x2\x12\x13\x4\x2>>^^\x3\x2\x66i\x6\x2\x1C\x1C%%\x46\x46TT"+
		"\x231\x2`\x3\x2\x2\x2\x4i\x3\x2\x2\x2\x6m\x3\x2\x2\x2\by\x3\x2\x2\x2\n"+
		"\x85\x3\x2\x2\x2\f\x8F\x3\x2\x2\x2\xE\x91\x3\x2\x2\x2\x10\x94\x3\x2\x2"+
		"\x2\x12\x99\x3\x2\x2\x2\x14\x116\x3\x2\x2\x2\x16\x118\x3\x2\x2\x2\x18"+
		"\x11E\x3\x2\x2\x2\x1A\x127\x3\x2\x2\x2\x1C\x12A\x3\x2\x2\x2\x1E\x133\x3"+
		"\x2\x2\x2 \x137\x3\x2\x2\x2\"\x14B\x3\x2\x2\x2$\x14D\x3\x2\x2\x2&\x15A"+
		"\x3\x2\x2\x2(\x167\x3\x2\x2\x2*\x174\x3\x2\x2\x2,\x17A\x3\x2\x2\x2.\x17C"+
		"\x3\x2\x2\x2\x30\x180\x3\x2\x2\x2\x32\x184\x3\x2\x2\x2\x34\x188\x3\x2"+
		"\x2\x2\x36\x1AA\x3\x2\x2\x2\x38\x1AC\x3\x2\x2\x2:\x1AE\x3\x2\x2\x2<\x1B6"+
		"\x3\x2\x2\x2>\x1BE\x3\x2\x2\x2@\x1C6\x3\x2\x2\x2\x42\x1CE\x3\x2\x2\x2"+
		"\x44\x1DB\x3\x2\x2\x2\x46\x1E2\x3\x2\x2\x2H\x1E7\x3\x2\x2\x2J\x1ED\x3"+
		"\x2\x2\x2L\x1EF\x3\x2\x2\x2N\x1F1\x3\x2\x2\x2P\x1F3\x3\x2\x2\x2R\x1F5"+
		"\x3\x2\x2\x2T\x1F9\x3\x2\x2\x2V\x1FB\x3\x2\x2\x2X\x1FD\x3\x2\x2\x2Z\x203"+
		"\x3\x2\x2\x2\\\x205\x3\x2\x2\x2^\x207\x3\x2\x2\x2`\x61\x5\x4\x3\x2\x61"+
		"\x62\a\x2\x2\x3\x62\x3\x3\x2\x2\x2\x63h\x5\x6\x4\x2\x64h\x5\b\x5\x2\x65"+
		"h\x5\x16\f\x2\x66h\a~\x2\x2g\x63\x3\x2\x2\x2g\x64\x3\x2\x2\x2g\x65\x3"+
		"\x2\x2\x2g\x66\x3\x2\x2\x2hk\x3\x2\x2\x2ig\x3\x2\x2\x2ij\x3\x2\x2\x2j"+
		"\x5\x3\x2\x2\x2ki\x3\x2\x2\x2ln\a\x46\x2\x2ml\x3\x2\x2\x2mn\x3\x2\x2\x2"+
		"no\x3\x2\x2\x2op\aK\x2\x2pq\a\x3\x2\x2qr\a\x4\x2\x2rs\a~\x2\x2st\x5\x10"+
		"\t\x2tv\a\x32\x2\x2uw\a~\x2\x2vu\x3\x2\x2\x2vw\x3\x2\x2\x2w\a\x3\x2\x2"+
		"\x2xz\x5Z.\x2yx\x3\x2\x2\x2yz\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x5\n\x6\x2|"+
		"}\a\x3\x2\x2}~\x5\f\a\x2~\x7F\a\x4\x2\x2\x7F\x80\a~\x2\x2\x80\x81\x5\x10"+
		"\t\x2\x81\x83\a\x32\x2\x2\x82\x84\a~\x2\x2\x83\x82\x3\x2\x2\x2\x83\x84"+
		"\x3\x2\x2\x2\x84\t\x3\x2\x2\x2\x85\x86\a}\x2\x2\x86\v\x3\x2\x2\x2\x87"+
		"\x8C\x5\xE\b\x2\x88\x89\a\x5\x2\x2\x89\x8B\x5\xE\b\x2\x8A\x88\x3\x2\x2"+
		"\x2\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x90"+
		"\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8F\x87\x3\x2\x2\x2\x8F\x90\x3\x2\x2"+
		"\x2\x90\r\x3\x2\x2\x2\x91\x92\x5Z.\x2\x92\x93\x5\x32\x1A\x2\x93\xF\x3"+
		"\x2\x2\x2\x94\x95\x5\x12\n\x2\x95\x11\x3\x2\x2\x2\x96\x98\x5\x14\v\x2"+
		"\x97\x96\x3\x2\x2\x2\x98\x9B\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99\x9A\x3"+
		"\x2\x2\x2\x9A\x13\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9C\x9D\a)\x2\x2\x9D"+
		"\x117\a~\x2\x2\x9E\x9F\a?\x2\x2\x9F\xA0\a}\x2\x2\xA0\xA1\a\x6\x2\x2\xA1"+
		"\xA2\x5\x36\x1C\x2\xA2\xA3\a\\\x2\x2\xA3\xA4\x5\x36\x1C\x2\xA4\xA5\a~"+
		"\x2\x2\xA5\xA6\x5\x12\n\x2\xA6\xA8\a\x35\x2\x2\xA7\xA9\a~\x2\x2\xA8\xA7"+
		"\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\x117\x3\x2\x2\x2\xAA\xAB\a\x43\x2"+
		"\x2\xAB\xAC\x5\x36\x1C\x2\xAC\xAD\a[\x2\x2\xAD\xAE\a~\x2\x2\xAE\xB2\x5"+
		"\x12\n\x2\xAF\xB0\a\x31\x2\x2\xB0\xB1\a~\x2\x2\xB1\xB3\x5\x12\n\x2\xB2"+
		"\xAF\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB6\a\x36"+
		"\x2\x2\xB5\xB7\a~\x2\x2\xB6\xB5\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\x117"+
		"\x3\x2\x2\x2\xB8\xB9\a`\x2\x2\xB9\xBA\a?\x2\x2\xBA\xBC\x5\x36\x1C\x2\xBB"+
		"\xBD\a~\x2\x2\xBC\xBB\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\x117\x3\x2\x2"+
		"\x2\xBE\xBF\a`\x2\x2\xBF\xC0\aW\x2\x2\xC0\xC2\x5\x36\x1C\x2\xC1\xC3\a"+
		"~\x2\x2\xC2\xC1\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\x117\x3\x2\x2\x2\xC4"+
		"\xC5\a\x62\x2\x2\xC5\xC6\x5\x36\x1C\x2\xC6\xC7\a~\x2\x2\xC7\xC8\x5\x12"+
		"\n\x2\xC8\xCA\a\x39\x2\x2\xC9\xCB\a~\x2\x2\xCA\xC9\x3\x2\x2\x2\xCA\xCB"+
		"\x3\x2\x2\x2\xCB\x117\x3\x2\x2\x2\xCC\xCE\aV\x2\x2\xCD\xCF\x5\x36\x1C"+
		"\x2\xCE\xCD\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\x117"+
		"\a~\x2\x2\xD1\xD3\x5\x1C\xF\x2\xD2\xD4\a~\x2\x2\xD3\xD2\x3\x2\x2\x2\xD3"+
		"\xD4\x3\x2\x2\x2\xD4\x117\x3\x2\x2\x2\xD5\xD7\x5\x36\x1C\x2\xD6\xD8\a"+
		"~\x2\x2\xD7\xD6\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\x117\x3\x2\x2\x2\xD9"+
		"\xDA\a\x1D\x2\x2\xDA\x117\a~\x2\x2\xDB\x117\a~\x2\x2\xDC\xDF\aR\x2\x2"+
		"\xDD\xE0\x5 \x11\x2\xDE\xE0\x5\x32\x1A\x2\xDF\xDD\x3\x2\x2\x2\xDF\xDE"+
		"\x3\x2\x2\x2\xE0\xE3\x3\x2\x2\x2\xE1\xE2\ar\x2\x2\xE2\xE4\x5\x36\x1C\x2"+
		"\xE3\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5\xE6\a"+
		"k\x2\x2\xE6\xE8\x5\x36\x1C\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2"+
		"\xE8\xEA\x3\x2\x2\x2\xE9\xEB\a~\x2\x2\xEA\xE9\x3\x2\x2\x2\xEA\xEB\x3\x2"+
		"\x2\x2\xEB\x117\x3\x2\x2\x2\xEC\xEF\aI\x2\x2\xED\xF0\x5 \x11\x2\xEE\xF0"+
		"\x5\x32\x1A\x2\xEF\xED\x3\x2\x2\x2\xEF\xEE\x3\x2\x2\x2\xF0\xF3\x3\x2\x2"+
		"\x2\xF1\xF2\ar\x2\x2\xF2\xF4\x5\x36\x1C\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4"+
		"\x3\x2\x2\x2\xF4\xF7\x3\x2\x2\x2\xF5\xF6\ak\x2\x2\xF6\xF8\x5\x36\x1C\x2"+
		"\xF7\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFA\x3\x2\x2\x2\xF9\xFB\a"+
		"~\x2\x2\xFA\xF9\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\x117\x3\x2\x2\x2\xFC"+
		"\xFF\a\'\x2\x2\xFD\x100\x5 \x11\x2\xFE\x100\x5\x32\x1A\x2\xFF\xFD\x3\x2"+
		"\x2\x2\xFF\xFE\x3\x2\x2\x2\x100\x103\x3\x2\x2\x2\x101\x104\x5 \x11\x2"+
		"\x102\x104\x5\x32\x1A\x2\x103\x101\x3\x2\x2\x2\x103\x102\x3\x2\x2\x2\x104"+
		"\x106\x3\x2\x2\x2\x105\x107\x5\x36\x1C\x2\x106\x105\x3\x2\x2\x2\x106\x107"+
		"\x3\x2\x2\x2\x107\x10A\x3\x2\x2\x2\x108\x109\ar\x2\x2\x109\x10B\x5\x36"+
		"\x1C\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10E\x3\x2\x2"+
		"\x2\x10C\x10D\ak\x2\x2\x10D\x10F\x5\x36\x1C\x2\x10E\x10C\x3\x2\x2\x2\x10E"+
		"\x10F\x3\x2\x2\x2\x10F\x111\x3\x2\x2\x2\x110\x112\a~\x2\x2\x111\x110\x3"+
		"\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x117\x3\x2\x2\x2\x113\x114\x5\x16"+
		"\f\x2\x114\x115\a~\x2\x2\x115\x117\x3\x2\x2\x2\x116\x9C\x3\x2\x2\x2\x116"+
		"\x9E\x3\x2\x2\x2\x116\xAA\x3\x2\x2\x2\x116\xB8\x3\x2\x2\x2\x116\xBE\x3"+
		"\x2\x2\x2\x116\xC4\x3\x2\x2\x2\x116\xCC\x3\x2\x2\x2\x116\xD1\x3\x2\x2"+
		"\x2\x116\xD5\x3\x2\x2\x2\x116\xD9\x3\x2\x2\x2\x116\xDB\x3\x2\x2\x2\x116"+
		"\xDC\x3\x2\x2\x2\x116\xEC\x3\x2\x2\x2\x116\xFC\x3\x2\x2\x2\x116\x113\x3"+
		"\x2\x2\x2\x117\x15\x3\x2\x2\x2\x118\x119\x5Z.\x2\x119\x11C\x5\x32\x1A"+
		"\x2\x11A\x11D\x5\x1A\xE\x2\x11B\x11D\x5\x18\r\x2\x11C\x11A\x3\x2\x2\x2"+
		"\x11C\x11B\x3\x2\x2\x2\x11D\x17\x3\x2\x2\x2\x11E\x121\a\x6\x2\x2\x11F"+
		"\x122\x5\x36\x1C\x2\x120\x122\x5\x1E\x10\x2\x121\x11F\x3\x2\x2\x2\x121"+
		"\x120\x3\x2\x2\x2\x122\x19\x3\x2\x2\x2\x123\x124\a\x5\x2\x2\x124\x126"+
		"\x5\x32\x1A\x2\x125\x123\x3\x2\x2\x2\x126\x129\x3\x2\x2\x2\x127\x125\x3"+
		"\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x1B\x3\x2\x2\x2\x129\x127\x3\x2\x2"+
		"\x2\x12A\x12B\x5\x32\x1A\x2\x12B\x12E\a\x6\x2\x2\x12C\x12F\x5\x36\x1C"+
		"\x2\x12D\x12F\x5\x1E\x10\x2\x12E\x12C\x3\x2\x2\x2\x12E\x12D\x3\x2\x2\x2"+
		"\x12F\x1D\x3\x2\x2\x2\x130\x134\x5 \x11\x2\x131\x134\x5$\x13\x2\x132\x134"+
		"\x5&\x14\x2\x133\x130\x3\x2\x2\x2\x133\x131\x3\x2\x2\x2\x133\x132\x3\x2"+
		"\x2\x2\x134\x1F\x3\x2\x2\x2\x135\x138\x5\"\x12\x2\x136\x138\x5(\x15\x2"+
		"\x137\x135\x3\x2\x2\x2\x137\x136\x3\x2\x2\x2\x138!\x3\x2\x2\x2\x139\x142"+
		"\a\a\x2\x2\x13A\x13F\x5,\x17\x2\x13B\x13C\a\x5\x2\x2\x13C\x13E\x5,\x17"+
		"\x2\x13D\x13B\x3\x2\x2\x2\x13E\x141\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2"+
		"\x13F\x140\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x142"+
		"\x13A\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x14C"+
		"\a\b\x2\x2\x145\x146\a\a\x2\x2\x146\x147\x5\x32\x1A\x2\x147\x148\a\x5"+
		"\x2\x2\x148\x149\x5\x32\x1A\x2\x149\x14A\a\b\x2\x2\x14A\x14C\x3\x2\x2"+
		"\x2\x14B\x139\x3\x2\x2\x2\x14B\x145\x3\x2\x2\x2\x14C#\x3\x2\x2\x2\x14D"+
		"\x156\a\x3\x2\x2\x14E\x153\x5.\x18\x2\x14F\x150\a\x5\x2\x2\x150\x152\x5"+
		".\x18\x2\x151\x14F\x3\x2\x2\x2\x152\x155\x3\x2\x2\x2\x153\x151\x3\x2\x2"+
		"\x2\x153\x154\x3\x2\x2\x2\x154\x157\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2"+
		"\x156\x14E\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158"+
		"\x159\a\x4\x2\x2\x159%\x3\x2\x2\x2\x15A\x163\a\x3\x2\x2\x15B\x160\x5\x30"+
		"\x19\x2\x15C\x15D\a\x5\x2\x2\x15D\x15F\x5\x30\x19\x2\x15E\x15C\x3\x2\x2"+
		"\x2\x15F\x162\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2"+
		"\x161\x164\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163\x15B\x3\x2\x2\x2\x163"+
		"\x164\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x166\a\x4\x2\x2\x166\'\x3"+
		"\x2\x2\x2\x167\x170\a\a\x2\x2\x168\x16D\x5*\x16\x2\x169\x16A\a\x5\x2\x2"+
		"\x16A\x16C\x5*\x16\x2\x16B\x169\x3\x2\x2\x2\x16C\x16F\x3\x2\x2\x2\x16D"+
		"\x16B\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x171\x3\x2\x2\x2\x16F\x16D"+
		"\x3\x2\x2\x2\x170\x168\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x172\x3"+
		"\x2\x2\x2\x172\x173\a\b\x2\x2\x173)\x3\x2\x2\x2\x174\x175\t\x2\x2\x2\x175"+
		"\x176\a\t\x2\x2\x176\x177\x5\x36\x1C\x2\x177+\x3\x2\x2\x2\x178\x17B\x5"+
		"\x30\x19\x2\x179\x17B\x5.\x18\x2\x17A\x178\x3\x2\x2\x2\x17A\x179\x3\x2"+
		"\x2\x2\x17B-\x3\x2\x2\x2\x17C\x17D\t\x3\x2\x2\x17D\x17E\a\t\x2\x2\x17E"+
		"\x17F\x5\x36\x1C\x2\x17F/\x3\x2\x2\x2\x180\x181\t\x4\x2\x2\x181\x182\a"+
		"\t\x2\x2\x182\x183\x5\x36\x1C\x2\x183\x31\x3\x2\x2\x2\x184\x186\a}\x2"+
		"\x2\x185\x187\x5\x34\x1B\x2\x186\x185\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2"+
		"\x187\x33\x3\x2\x2\x2\x188\x189\a\a\x2\x2\x189\x18E\x5\x36\x1C\x2\x18A"+
		"\x18B\a\x5\x2\x2\x18B\x18D\x5\x36\x1C\x2\x18C\x18A\x3\x2\x2\x2\x18D\x190"+
		"\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x191\x3"+
		"\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x191\x192\a\b\x2\x2\x192\x35\x3\x2\x2"+
		"\x2\x193\x194\x5\n\x6\x2\x194\x19D\a\x3\x2\x2\x195\x19A\x5\x36\x1C\x2"+
		"\x196\x197\a\x5\x2\x2\x197\x199\x5\x36\x1C\x2\x198\x196\x3\x2\x2\x2\x199"+
		"\x19C\x3\x2\x2\x2\x19A\x198\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\x19E"+
		"\x3\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19D\x195\x3\x2\x2\x2\x19D\x19E\x3"+
		"\x2\x2\x2\x19E\x19F\x3\x2\x2\x2\x19F\x1A0\a\x4\x2\x2\x1A0\x1AB\x3\x2\x2"+
		"\x2\x1A1\x1A7\x5:\x1E\x2\x1A2\x1A3\x5\x38\x1D\x2\x1A3\x1A4\x5:\x1E\x2"+
		"\x1A4\x1A6\x3\x2\x2\x2\x1A5\x1A2\x3\x2\x2\x2\x1A6\x1A9\x3\x2\x2\x2\x1A7"+
		"\x1A5\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1AB\x3\x2\x2\x2\x1A9\x1A7"+
		"\x3\x2\x2\x2\x1AA\x193\x3\x2\x2\x2\x1AA\x1A1\x3\x2\x2\x2\x1AB\x37\x3\x2"+
		"\x2\x2\x1AC\x1AD\t\x5\x2\x2\x1AD\x39\x3\x2\x2\x2\x1AE\x1B3\x5<\x1F\x2"+
		"\x1AF\x1B0\aO\x2\x2\x1B0\x1B2\x5<\x1F\x2\x1B1\x1AF\x3\x2\x2\x2\x1B2\x1B5"+
		"\x3\x2\x2\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4;\x3\x2\x2"+
		"\x2\x1B5\x1B3\x3\x2\x2\x2\x1B6\x1BB\x5> \x2\x1B7\x1B8\a\x63\x2\x2\x1B8"+
		"\x1BA\x5> \x2\x1B9\x1B7\x3\x2\x2\x2\x1BA\x1BD\x3\x2\x2\x2\x1BB\x1B9\x3"+
		"\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC=\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2"+
		"\x1BE\x1C3\x5@!\x2\x1BF\x1C0\a\x15\x2\x2\x1C0\x1C2\x5@!\x2\x1C1\x1BF\x3"+
		"\x2\x2\x2\x1C2\x1C5\x3\x2\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C3\x1C4\x3\x2"+
		"\x2\x2\x1C4?\x3\x2\x2\x2\x1C5\x1C3\x3\x2\x2\x2\x1C6\x1CB\x5\x42\"\x2\x1C7"+
		"\x1C8\t\x6\x2\x2\x1C8\x1CA\x5\x42\"\x2\x1C9\x1C7\x3\x2\x2\x2\x1CA\x1CD"+
		"\x3\x2\x2\x2\x1CB\x1C9\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x41\x3\x2"+
		"\x2\x2\x1CD\x1CB\x3\x2\x2\x2\x1CE\x1D3\x5\x44#\x2\x1CF\x1D0\t\a\x2\x2"+
		"\x1D0\x1D2\x5\x44#\x2\x1D1\x1CF\x3\x2\x2\x2\x1D2\x1D5\x3\x2\x2\x2\x1D3"+
		"\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x43\x3\x2\x2\x2\x1D5\x1D3"+
		"\x3\x2\x2\x2\x1D6\x1D7\aN\x2\x2\x1D7\x1DC\x5\x44#\x2\x1D8\x1D9\a\x14\x2"+
		"\x2\x1D9\x1DC\x5\x44#\x2\x1DA\x1DC\x5\x46$\x2\x1DB\x1D6\x3\x2\x2\x2\x1DB"+
		"\x1D8\x3\x2\x2\x2\x1DB\x1DA\x3\x2\x2\x2\x1DC\x45\x3\x2\x2\x2\x1DD\x1DE"+
		"\a\x10\x2\x2\x1DE\x1E3\x5\x46$\x2\x1DF\x1E0\a\x11\x2\x2\x1E0\x1E3\x5\x46"+
		"$\x2\x1E1\x1E3\x5H%\x2\x1E2\x1DD\x3\x2\x2\x2\x1E2\x1DF\x3\x2\x2\x2\x1E2"+
		"\x1E1\x3\x2\x2\x2\x1E3G\x3\x2\x2\x2\x1E4\x1E8\x5X-\x2\x1E5\x1E8\x5\x32"+
		"\x1A\x2\x1E6\x1E8\x5J&\x2\x1E7\x1E4\x3\x2\x2\x2\x1E7\x1E5\x3\x2\x2\x2"+
		"\x1E7\x1E6\x3\x2\x2\x2\x1E8I\x3\x2\x2\x2\x1E9\x1EE\x5T+\x2\x1EA\x1EE\x5"+
		"P)\x2\x1EB\x1EE\x5R*\x2\x1EC\x1EE\x5V,\x2\x1ED\x1E9\x3\x2\x2\x2\x1ED\x1EA"+
		"\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2\x2\x1ED\x1EC\x3\x2\x2\x2\x1EEK\x3\x2\x2"+
		"\x2\x1EF\x1F0\ay\x2\x2\x1F0M\x3\x2\x2\x2\x1F1\x1F2\az\x2\x2\x1F2O\x3\x2"+
		"\x2\x2\x1F3\x1F4\a{\x2\x2\x1F4Q\x3\x2\x2\x2\x1F5\x1F6\a|\x2\x2\x1F6S\x3"+
		"\x2\x2\x2\x1F7\x1FA\x5L\'\x2\x1F8\x1FA\x5N(\x2\x1F9\x1F7\x3\x2\x2\x2\x1F9"+
		"\x1F8\x3\x2\x2\x2\x1FAU\x3\x2\x2\x2\x1FB\x1FC\t\b\x2\x2\x1FCW\x3\x2\x2"+
		"\x2\x1FD\x1FE\a\x3\x2\x2\x1FE\x1FF\x5\x36\x1C\x2\x1FF\x200\a\x4\x2\x2"+
		"\x200Y\x3\x2\x2\x2\x201\x204\x5^\x30\x2\x202\x204\x5\\/\x2\x203\x201\x3"+
		"\x2\x2\x2\x203\x202\x3\x2\x2\x2\x204[\x3\x2\x2\x2\x205\x206\t\t\x2\x2"+
		"\x206]\x3\x2\x2\x2\x207\x208\t\n\x2\x2\x208_\x3\x2\x2\x2\x44gimvy\x83"+
		"\x8C\x8F\x99\xA8\xB2\xB6\xBC\xC2\xCA\xCE\xD3\xD7\xDF\xE3\xE7\xEA\xEF\xF3"+
		"\xF7\xFA\xFF\x103\x106\x10A\x10E\x111\x116\x11C\x121\x127\x12E\x133\x137"+
		"\x13F\x142\x14B\x153\x156\x160\x163\x16D\x170\x17A\x186\x18E\x19A\x19D"+
		"\x1A7\x1AA\x1B3\x1BB\x1C3\x1CB\x1D3\x1DB\x1E2\x1E7\x1ED\x1F9\x203";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SixR_20.Interpreter
